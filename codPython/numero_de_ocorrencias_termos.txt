'''
Dada um texto qualquer e um lista de termos de pesquisa (sequencia de caracteres), retorne os primeiros K termos mais recorrentes na string, onde K é um parâmetro configurável.

Exemplo:

String: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua"

Lista de termos: ["a", "em", "i", "el"]

K: 2

Resultado: ["i", "a"]

Explicação:

Ocorrências de cada termo,"i": 11, "a": 7, "em": 2, "el": 1, com K = 2, retornamos "i" e "a" ordenados conforme a quantidade de ocorrências de cada termo.

Obs: Quando houver termos com quantidades iguais, priorizar o retorno de acordo com a ordem de ocorrência do termo na string.
'''


def calcula_top_ocorrencias_de_queries(texto, queries, k):
    dic_querie = {}
    value_amount = []
    for i in queries:
        dic_querie[i] = texto.count(i) #conta e adciona cada querie no dicionario 

    sorted_dict = dict(sorted(dic_querie.items(), key=lambda item: item[1], reverse=True)) #coloca o dicionário em ordem decrecente por valor de cada key.

    keysList = list(sorted_dict.keys())  #Retorna apenas as keys do dicionario em uma lista
    for x in range(0, k):
        value_amount.append(keysList[x])  #Extraio apenas as primeiras colocadas e coloco-as em uma lista final para ser retornada

    return value_amount

calcula_top_ocorrencias_de_queries("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua", ["a", "em", "i", "el"], 2)